@functions {
    // To support the layout classifaction below. Implementing as a razor function because we can, could otherwise be a Func<string[], string, string> in the code block following.
    string CalcuClassify(string[] zoneNames, string classNamePrefix) {
        var zoneCounter = 0;
        var zoneNumsFilled = string.Join("", zoneNames.Select(zoneName => { ++zoneCounter; return Model[zoneName] != null ? zoneCounter.ToString() : "";}).ToArray());
        return HasText(zoneNumsFilled) ? classNamePrefix + zoneNumsFilled : "";
    }
}
@{
    /* Global includes for the theme
    ***************************************************************/
    
    /* Some useful shortcuts or settings
    ***************************************************************/

    Func<dynamic, dynamic> Zone = x => Display(x); // Zone as an alias for Display to help make it obvious when we're displaying zones

    /* Layout classification based on filled zones
    ***************************************************************/

    //Add classes to the wrapper div to toggle aside widget zones on and off
    var asideClass = CalcuClassify(new [] {"AsideFirst", "AsideSecond"}, "aside-"); // for aside-1, aside-2 or aside-12 if any of the aside zones are filled
    if (HasText(asideClass)) {
        Model.Classes.Add(asideClass);
    }

    //Add classes to the wrapper div to toggle tripel widget zones on and off
    var tripelClass = CalcuClassify(new [] {"TripelFirst", "TripelSecond", "TripelThird"}, "tripel-"); // for tripel-1, triple-2, etc. if any of the tripel zones are filled
    if (HasText(tripelClass)) {
        Model.Classes.Add(tripelClass);
    }

    //Add classes to the wrapper div to toggle quad widget zones on and off
    var footerQuadClass = CalcuClassify(new [] {"FooterQuadFirst", "FooterQuadSecond", "FooterQuadThird", "FooterQuadFourth"}, "split-"); // for quad-1, quad-2, etc. if any of the quad zones are filled
    if (HasText(footerQuadClass)) {
        Model.Classes.Add(footerQuadClass);
    }

    /* Inserting some ad hoc shapes
    ***************************************************************/

    WorkContext.Layout.Header.Add(New.Branding(), "5"); // Site name and link to the home page
    WorkContext.Layout.Footer.Add(New.BadgeOfHonor(), "5"); // Powered by Orchard
    WorkContext.Layout.Footer.Add(New.User(), "10"); // Login and dashboard links

    /* Last bit of code to prep the layout wrapper
    ***************************************************************/
    
    var tag = Tag(Model, "div"); // using Tag so the layout div gets the classes, id and other attributes added to the Model
}

@tag.StartElement

    <div id="layout-wrapper">

        <div id="layout-topBar" class="row">
            <div id="topBar" class="col">
                @Display(New.User())
            </div>
        </div>

        @if (Model.Header != null) {
        <header id="layout-header-container" class="row">



            <div id="layout-header" class="col">
                @Zone(Model.Header)
            </div>
        </header>
        }
        @if (Model.Navigation != null) {
        <div id="layout-navigation-container" class="row">
            <div id="layout-navigation" class="col">
                @Zone(Model.Navigation)
            </div>
        </div>
        }
        @if (Model.BeforeMain != null) {
        <div id="layout-before-container" class="row">
            <div id="layout-before" class="col">
                @Zone(Model.BeforeMain)
            </div>
        </div>
        }
        @if (Model.Featured != null) {
        <div id="layout-featured-container" class="row">
            <div id="layout-featured" class="col">
                @Zone(Model.Featured)
            </div>
        </div>
        }
        <div id="layout-main-container" class="row">

            @if (Model.AsideFirst != null) {
            <aside id="aside-first" class="col">
                @Zone(Model.AsideFirst)
            </aside>
            }
            <div id="layout-content" class="col">
                @if (Model.Messages != null) {
                <div id="messages">
                    @Zone(Model.Messages)
                </div>
                }
                @if (Model.BeforeContent != null) {
                <div id="before-content">
                    @Zone(Model.BeforeContent)
                </div>
                }
                @* the model content for the page is in the Content zone @ the default position (nothing, zero, zilch) *@
                @if (Model.Content != null) {
                <div id="content">
                    @Zone(Model.Content)
                </div>
                }
                @if (Model.AfterContent != null) {
                <div id="after-content">
                    @Zone(Model.AfterContent)
                </div>
                }
            </div>
            @if (Model.AsideSecond != null) {
            <aside id="aside-second" class="col">
                @Zone(Model.AsideSecond)
            </aside>
            }
        </div>

        @if (Model.AfterMain != null) {
        <div id="layout-after-main-container" class="row">
            <div id="layout-after-main" class="col">
                @Zone(Model.AfterMain)
            </div>
        </div>
        }
        @if (Model.TripelFirst != null || Model.TripelSecond != null || Model.TripelThird != null) {
        <div id="layout-tripel-container" class="row">
                @if (Model.TripelFirst != null) {
                <div id="tripel-first" class="col">
                    @Zone(Model.TripelFirst)
                </div>
                }
                @if (Model.TripelSecond != null) {
                <div id="tripel-second" class="col">
                    @Zone(Model.TripelSecond)
                </div>
                }
                @if (Model.TripelThird != null) {
                <div id="tripel-third" class="col">
                    @Zone(Model.TripelThird)
                </div>
                }
        </div>
        }
        
    </div>

    <div id="layout-footer-container-wrapper">
        
        <footer id="layout-footer-container">

            <div id="footer-quad-container" class="row">
                @if (Model.FooterQuadFirst != null) {
                <div id="footer-quad-first" class="col">
                    @Zone(Model.FooterQuadFirst)
                </div>
                }
                @if (Model.FooterQuadSecond != null) {
                <div id="footer-quad-second" class="col">
                    @Zone(Model.FooterQuadSecond)
                </div>
                }
                @if (Model.FooterQuadThird != null) {
                <div id="footer-quad-third" class="col">
                    @Zone(Model.FooterQuadThird)
                </div>
                }
                @if (Model.FooterQuadFourth != null) {
                <div id="footer-quad-fourth" class="col">
                    @Zone(Model.FooterQuadFourth)
                </div>
                }
            </div>

            @if(Model.Footer != null) {
            <div id="layout-footer" class="row">
                <div id="footer" class="col">
                    @Zone(Model.Footer)
                </div>
            </div>
            }
        </footer>
    </div>

@tag.EndElement